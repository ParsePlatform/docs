# Sessions

<div class='tip info'><div>
  Session APIs are only available in apps with revocable sessions enabled. Parse apps created after March 25, 2015 have this enabled by default ("Require Revocable Sessions" toggle in your Parse.com app settings page). If you have an existing app, you can upgrade to revocable sessions by following the [Session Migration Tutorial](https://www.parse.com/tutorials/session-migration-tutorial).
</div></div>

Sessions represent an instance of a user logged into a device. Sessions are automatically created when users log in or sign up. They are automatically deleted when users log out. There is one distinct `%{ParseSession}` object for each user-installation pair; if a user issues a login request from a device they're already logged into, that user's previous `%{ParseSession}` object for that Installation is automatically deleted. `%{ParseSession}` objects are stored on Parse in the Session class, and you can view them on the Parse.com Data Browser. We provide a set of APIs to manage `%{ParseSession}` objects in your app.

`%{ParseSession}` is a subclass of `%{ParseObject}`, so you can query, update, and delete sessions in the same way that you manipulate normal objects on Parse. Because the Parse Cloud automatically creates sessions when you log in or sign up users, you should not manually create `%{ParseSession}` objects unless you are building a "Parse for IoT" app (e.g. Arduino or Embedded C). Deleting a `%{ParseSession}` will log the user out of the device that is currently using this session's token.

Unlike other Parse objects, the `%{ParseSession}` class does not have Cloud Code triggers. So you cannot register a `beforeSave` or `afterSave` handler for the Session class.

## Properties

The `%{ParseSession}` object has these special fields:

* `sessionToken` (readonly): String token for authentication on Parse API requests. In the response of `%{ParseSession}` queries, only your current `%{ParseSession}` object will contain a session token.
* `user`: (readonly) Pointer to the `%{ParseUser}` object that this session is for.
* `createdWith` (readonly): Information about how this session was created (e.g. `{ "action": "login", "authProvider": "password"}`).
    * `action` could have values: `login`, `signup`, `create`, or `upgrade`. The `create` action is when the developer manually creates the session by saving a `%{ParseSession}` object.  The `upgrade` action is when the user is upgraded to revocable session from a legacy session token.
    * `authProvider` could have values: `password`, `anonymous`, `facebook`, or `twitter`.
* `restricted` (readonly): Boolean for whether this session is restricted.
    * Restricted sessions do not have write permissions on `%{ParseUser}`, `%{ParseSession}`, and `%{ParseRole}` classes on Parse. Restricted sessions also cannot read unrestricted sessions.
    * All sessions that the Parse Cloud automatically creates during user login/signup will be unrestricted. All sessions that the developer manually creates by saving a new `%{ParseSession}` object from the client (only needed for "Parse for IoT" apps) will be restricted.
* `expiresAt` (readonly): Approximate UTC date when this `%{ParseSession}` object will be automatically deleted. You can configure session expiration settings (either 1-year inactivity expiration or no expiration) in your app's Parse.com dashboard settings page.
* `installationId` (can be set only once): String referring to the `%{ParseInstallation}` where the session is logged in from. For Parse SDKs, this field will be automatically set when users log in or sign up.
All special fields except `installationId` can only be set automatically by the Parse Cloud. You can add custom fields onto `%{ParseSession}` objects, but please keep in mind that any logged-in device (with session token) can read other sessions that belong to the same user (unless you disable Class-Level Permissions, see below).

## Handling Invalid Session Token Error

Apps created before March 25, 2015 use legacy session tokens until you migrate them to use the new revocable sessions. On API requests with legacy tokens, if the token is invalid (e.g. User object was deleted), then the request is executed as a non-logged in user and no error was returned. On API requests with revocable session tokens, an invalid session token will always fail with the "invalid session token" error. This new behavior lets you know when you need to ask the user to log in again.

With revocable sessions, your current session token could become invalid if its corresponding `%{ParseSession}` object is deleted from the Parse Cloud. This could happen if you implement a Session Manager UI that lets users log out of other devices, or if you manually delete the session via Cloud Code, REST API, or Data Browser. Sessions could also be deleted due to automatic expiration (if configured in app settings). When a device's session token no longer corresponds to a `%{ParseSession}` object on the Parse Cloud, all API requests from that device will fail with “Error 209: invalid session token”.
