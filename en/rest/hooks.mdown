# Hooks

You can create, update, list or delete all your cloud code webhook via the Hooks API, in addition to being able to do so through the parse website.

Hooks API requires that the user provides Application-Id and Master-Key in the request headers.

There are two kinds of cloud code webhooks: cloud functions hooks and object triggers hooks.

Cloud functions are functions that run in the cloud and can be invoked
by passing some parameters. They are very valuable in extending the functionality of your app and also provide you with the ability to change desired functionality on the fly
with out requiring all the clients to update your app. For more details please read [cloud code functions](https://parse.com/docs/js/guide#cloud-code-cloud-functions).

Object triggers are invoked whenever you save or delete a parse object. A common use case for triggers is to perform sanity checks on objects
before saving to the database. For more details please read [cloud code triggers](https://parse.com/docs/js/guide#cloud-code-beforesave-triggers).

In the api we clearly differentiate between both these kinds of webhooks because of the difference in the parameters involved.

## Fetch the list of functions
To fetch the list of all cloud functions and cloud function webhooks you deployed or created, use

```bash
curl -X GET \
  -H "X-Parse-Application-Id: ${APPLICATION_ID}" \
  -H "X-Parse-Master-Key: ${MASTER_KEY}" \
  -H "Content-Type: application/json" \
  https://api.parse.com/1/hooks/functions
```

Expected output
```bash
{
  "results": [
    { "functionName": "function1", "url": "https://api.example.com/function1" },
    { "functionName": "function1" },
    { "functionName": "function2", "url": "https://api.example.com/function2" }
    { "functionName": "function3" },
  ]
}
```

Output is a json object with one key: "results" whose value is a list of cloud code functions or cloud code function webhooks

## Fetch a single function
To fetch a single cloud function with a given name, use

```bash
curl -X GET \
  -H "X-Parse-Application-Id: ${APPLICATION_ID}" \
  -H "X-Parse-Master-Key: ${MASTER_KEY}" \
  -H "Content-Type: application/json" \
  https://api.parse.com/1/hooks/functions/function1
```

Output is a json object with one key: "results" whose value is a list of cloud code functions or cloud code function webhooks
with the given name
```bash
{
  "results": [
    { "functionName": "function1", "url": "https://api.example.com/function1" },
    { "functionName": "function1" },
  ]
}
```

If only one of cloud code function or cloud code trigger function with the given name exists, then only that one value is present in the list.

```bash
curl -X GET \
  -H "X-Parse-Application-Id: ${APPLICATION_ID}" \
  -H "X-Parse-Master-Key: ${MASTER_KEY}" \
  -H "Content-Type: application/json" \
  https://api.parse.com/1/hooks/functions/function2
```

would return 

```bash
{
  "results": [
    { "functionName": "function2", "url": "https://api.example.com/function2" }
  ]
}
```

## Fetch the list of triggers
To fetch the list of all cloud code triggers and cloud code webhook triggers you deployed or created, use
```bash
curl -X GET \
  -H "X-Parse-Application-Id: ${APPLICATION_ID}" \
  -H "X-Parse-Master-Key: ${MASTER_KEY}" \
  -H "Content-Type: application/json" \
  https://api.parse.com/1/hooks/triggers
```

Expected output
```bash
{
  "results": [
    { "className": "sample", "triggerName": "beforeSave" },
    {
      "className": "sample",
      "triggerName": "beforeSave",
      "url": "https://api.example.com/sample/beforeSave"
    },
    {
      "className": "sample2",
      "triggerName": "afterSave",
      "url": "https://api.example.com/sample2/afterSave"
    },
    { "className": "sample3", "triggerName": "beforeDelete" },
  ]
}
```

Output is a json object with one key: "results" whose value is a list of cloud code triggers or cloud code trigger webhooks

## Fetch a single trigger
To fetch a single trigger use,

```bash
curl -X GET \
  -H "X-Parse-Application-Id: ${APPLICATION_ID}" \
  -H "X-Parse-Master-Key: ${MASTER_KEY}" \
  -H "Content-Type: application/json" \
  https://api.parse.com/1/hooks/triggers/sample/beforeSave
```

The path looks like `/hooks/triggers/className/triggerName` where `triggerName` can be one of `beforeSave`, `afterSave`, `beforeDelete`, `afterDelete`.

Expected output
```bash
{
  "results": [
    { "className": "sample", "triggerName": "beforeSave" },
    {
      "className": "sample",
      "triggerName": "beforeSave",
      "url": "https://api.example.com/sample/beforeSave"
    }
  ]
}
```

Output is a json object with one key: "results" whose value is a list of all cloud code triggers with given name for a given class. 

If only one of cloud code trigger or cloud code trigger webhook with the given name exists, then only that one value is present in the list.

For example, 
```bash
curl -X GET \
  -H "X-Parse-Application-Id: ${APPLICATION_ID}" \
  -H "X-Parse-Master-Key: ${MASTER_KEY}" \
  -H "Content-Type: application/json" \
  https://api.parse.com/1/hooks/triggers/sample2/afterSave
```

returns
```bash
{
  "results": [
    {
      "className": "sample2",
      "triggerName": "afterSave",
      "url": "https://api.example.com/sample2/afterSave"
    }
  ]
}
```

Note that POST, PUT and DELETE only work on function or trigger webhooks. To create regular cloud code functions or triggers you can modify your cloude code js files and perform a `parse deploy` the usual way.

## Create a new cloud code function webhook
To create a new cloud code function webhook post to `/1/hooks/functions` with payload in the format
```bash
{"functionName" : x, "url" : y}
```

Post example,

```bash
curl -X POST \
  -H "X-Parse-Application-Id: ${APPLICATION_ID}" \
  -H "X-Parse-Master-Key: ${MASTER_KEY}" \
  -H "Content-Type: application/json" \
  -d '{"functionName":"function4","url":"https://api.example.com/function4"}' \
  https://api.parse.com/1/hooks/functions
```

Expected output
```bash
{"functionName": "function4", "url": "https://api.example.com/function4"}'
```

It returns the function name and url of the created webhook.

If a cloud code function with the same name already exists then the result also contains a warning.

Example
```bash
curl -X POST \
  -H "X-Parse-Application-Id: ${APPLICATION_ID}" \
  -H "X-Parse-Master-Key: ${MASTER_KEY}" \
  -H "Content-Type: application/json" \
  -d '{"functionName":"function3","url":"https://api.example.com/function3"}' \
  https://api.parse.com/1/hooks/functions
```

Expected output
```bash
{
  "functionName": "function3",
  "url": "https://api.example.com/function3",
  "warning": "a cloudcode function with name: function3 already exists"
}
```

## Create a new cloud code trigger webhook
To create a new cloud code function webhook post to `/1/hooks/triggers` with payload in the format
```bash
{"className": x, "triggerName": y, "url": z}
```

Post example,
```bash
curl -X POST \
  -H "X-Parse-Application-Id: ${APPLICATION_ID}" \
  -H "X-Parse-Master-Key: ${MASTER_KEY}" \
  -H "Content-Type: application/json" \
  -d '{"className": "sample2", "triggerName": "beforeSave", "url": "https://api.example.com/sample2/beforeSave"}' \
https://api.parse.com/1/hooks/triggers
```

Expected output
```bash
{
  "className": "sample2",
  "triggerName": "beforeSave",
  "url": "https://api.example.com/sample2/beforeSave"
}
```

It returns the class name, trigger name and url of the created trigger webhook.

If a cloud code trigger with the same name already exists then the result also contains a warning.

Example
```bash
curl -X POST \
  -H "X-Parse-Application-Id: ${APPLICATION_ID}" \
  -H "X-Parse-Master-Key: ${MASTER_KEY}" \
  -H "Content-Type: application/json" \
  -d '{"className": "sample3", "triggerName": "beforeDelete", "url": "https://api.example.com/sample/beforeDelete"}' \
https://api.parse.com/1/hooks/triggers
```

Expected output
```bash
{
  "className": "sample3",
  "triggerName": "beforeDelete",
  "url": "https://api.example.com/sample3/beforeDelete",
  "warning": "beforeDelete trigger already defined for class sample3 in cloud code"
}
```


## Edit url of a function webhook
To edit the url of a function webhook that was already created use the put method.

Put example,
```bash
curl -X PUT \
  -H "X-Parse-Application-Id: ${APPLICATION_ID}" \
  -H "X-Parse-Master-Key: ${MASTER_KEY}" \
  -H "Content-Type: application/json" \
  -d '{"url":"https://api.example.com/_function4"}' \
  https://api.parse.com/1/hooks/functions/function4
```

Expected output
```bash
{"functionName": "function4", "url": "https://api.example.com/function4"}'
```

It returns the function name and url of the modified webhook.

If a cloud code function with the same name already exists then the result also contains a warning.

Example
```bash
curl -X PUT \
  -H "X-Parse-Application-Id: ${APPLICATION_ID}" \
  -H "X-Parse-Master-Key: ${MASTER_KEY}" \
  -H "Content-Type: application/json" \
  -d '{"url":"https://api.example.com/_function3"}' \
  https://api.parse.com/1/hooks/functions/function3
```

Expected output
```bash
{
  "functionName": "function3",
  "url": "https://api.example.com/_function3",
  "warning": "a cloudcode function with name: function3 already exists"
}
```

## Edit url of a trigger webhook.
To edit the url of a trigger webhook that was already crated use the put method.

```bash
curl -X PUT \
  -H "X-Parse-Application-Id: ${APPLICATION_ID}" \
  -H "X-Parse-Master-Key: ${MASTER_KEY}" \
  -H "Content-Type: application/json" \
  -d '{"url": "https://api.example.com/sample2/_beforeSave"}' \
https://api.parse.com/1/hooks/triggers/sample2/beforeSave
```

Expected output
```bash
{
  "className": "sample2",
  "triggerName": "beforeSave",
  "url": "https://api.example.com/sample2/_beforeSave"
}
```

It returns the class name, trigger name and url of the modified trigger webhook.

If a cloud code trigger with the same name already exists then the result also contains a warning.

Example
```bash
curl -X PUT \
  -H "X-Parse-Application-Id: ${APPLICATION_ID}" \
  -H "X-Parse-Master-Key: ${MASTER_KEY}" \
  -H "Content-Type: application/json" \
  -d '{"url": "https://api.example.com/sample/beforeDelete"}' \
https://api.parse.com/1/hooks/triggers/sample3/beforeDelete
```

Expected output
```bash
{
  "className": "sample3",
  "triggerName": "beforeDelete",
  "url": "https://api.example.com/sample3/beforeDelete",
  "warning": "beforeDelete trigger already defined for class sample3 in cloud code"
}
```

## Delete a function webhook
To delete a function webhook use the put method. 

```bash
curl -X PUT \
  -H "X-Parse-Application-Id: ${APPLICATION_ID}" \
  -H "X-Parse-Master-Key: ${MASTER_KEY}" \
  -H "Content-Type: application/json" \
  -d '{"__op": "Delete"}' \
https://api.parse.com/1/hooks/functions/function2
```

Expected output
```bash
{}
```

If a cloud code trigger with the same name already exists then the it is returned as the result.

```bash
curl -X PUT \
  -H "X-Parse-Application-Id: ${APPLICATION_ID}" \
  -H "X-Parse-Master-Key: ${MASTER_KEY}" \
  -H "Content-Type: application/json" \
  -d '{ "__op": "Delete" }' \
https://api.parse.com/1/hooks/functions/function1
```

Expected output
```bash
{ "functionName": "function1" }
```

## Delete a trigger webhook
To delete a trigger webhook use the put method. 

```bash
curl -X PUT \
  -H "X-Parse-Application-Id: ${APPLICATION_ID}" \
  -H "X-Parse-Master-Key: ${MASTER_KEY}" \
  -H "Content-Type: application/json" \
  -d '{ "__op": "Delete" }' \
https://api.parse.com/1/hooks/triggers/sample2/beforeSave
```

Expected output
```bash
{}
```

If a cloud code trigger with the same name already exists then the it is returned as the result.

Example
```bash
curl -X PUT \
  -H "X-Parse-Application-Id: ${APPLICATION_ID}" \
  -H "X-Parse-Master-Key: ${MASTER_KEY}" \
  -H "Content-Type: application/json" \
  -d '{ "__op": "Delete" }' \
https://api.parse.com/1/hooks/triggers/sample3/beforeDelete
```

Expected output
```bash
{
  "className": "sample3",
  "triggerName": "beforeDelete"
}
```
